/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: rlm_zmq.proto */

#ifndef PROTOBUF_C_rlm_5fzmq_2eproto__INCLUDED
#define PROTOBUF_C_rlm_5fzmq_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _FRAVP FRAVP;
typedef struct _FRPacket FRPacket;
typedef struct _FRRequest FRRequest;
typedef struct _ModState ModState;


/* --- enums --- */

typedef enum _RLMRCODE {
  RLM__RCODE__REJECT = 0,
  RLM__RCODE__FAIL = 1,
  RLM__RCODE__OK = 2,
  RLM__RCODE__HANDLED = 3,
  RLM__RCODE__INVALID = 4,
  RLM__RCODE__USERLOCK = 5,
  RLM__RCODE__NOTFOUND = 6,
  RLM__RCODE__NOOP = 7,
  RLM__RCODE__UPDATED = 8,
  RLM__RCODE__NUMCODES = 9,
  RLM__RCODE__UNKNOWN = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RLM__RCODE)
} RLMRCODE;
typedef enum _RLMCOMPONENT {
  RLM__COMPONENT__AUTH = 0,
  RLM__COMPONENT__AUTZ = 1,
  RLM__COMPONENT__PREACCT = 2,
  RLM__COMPONENT__ACCT = 3,
  RLM__COMPONENT__SESS = 4,
  RLM__COMPONENT__PRE_PROXY = 5,
  RLM__COMPONENT__POST_PROXY = 6,
  RLM__COMPONENT__POST_AUTH = 7,
  RLM__COMPONENT__RECV_COA = 8,
  RLM__COMPONENT__SEND_COA = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RLM__COMPONENT)
} RLMCOMPONENT;

/* --- messages --- */

struct  _FRAVP
{
  ProtobufCMessage base;
  uint32_t attr;
  uint32_t vendor;
  char *value;
  char *op;
  protobuf_c_boolean has_tag;
  uint32_t tag;
};
extern char fr__avp__op__default_value[];
#define FR__AVP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fr__avp__descriptor) \
    , 0, 0, NULL, fr__avp__op__default_value, 0,0 }


struct  _FRPacket
{
  ProtobufCMessage base;
  uint32_t code;
  uint32_t id;
  size_t n_attrs;
  FRAVP **attrs;
};
#define FR__PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fr__packet__descriptor) \
    , 0, 0, 0,NULL }


struct  _FRRequest
{
  ProtobufCMessage base;
  FRPacket *packet;
  FRPacket *reply;
  size_t n_config_items;
  FRAVP **config_items;
  size_t n_state;
  FRAVP **state;
};
#define FR__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fr__request__descriptor) \
    , NULL, NULL, 0,NULL, 0,NULL }


struct  _ModState
{
  ProtobufCMessage base;
  RLMCOMPONENT component;
  FRRequest *request;
  RLMRCODE rcode;
  protobuf_c_boolean has_prev_rcode;
  RLMRCODE prev_rcode;
};
#define MOD__STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mod__state__descriptor) \
    , 0, NULL, RLM__RCODE__NOOP, 0,0 }


/* FRAVP methods */
void   fr__avp__init
                     (FRAVP         *message);
size_t fr__avp__get_packed_size
                     (const FRAVP   *message);
size_t fr__avp__pack
                     (const FRAVP   *message,
                      uint8_t             *out);
size_t fr__avp__pack_to_buffer
                     (const FRAVP   *message,
                      ProtobufCBuffer     *buffer);
FRAVP *
       fr__avp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fr__avp__free_unpacked
                     (FRAVP *message,
                      ProtobufCAllocator *allocator);
/* FRPacket methods */
void   fr__packet__init
                     (FRPacket         *message);
size_t fr__packet__get_packed_size
                     (const FRPacket   *message);
size_t fr__packet__pack
                     (const FRPacket   *message,
                      uint8_t             *out);
size_t fr__packet__pack_to_buffer
                     (const FRPacket   *message,
                      ProtobufCBuffer     *buffer);
FRPacket *
       fr__packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fr__packet__free_unpacked
                     (FRPacket *message,
                      ProtobufCAllocator *allocator);
/* FRRequest methods */
void   fr__request__init
                     (FRRequest         *message);
size_t fr__request__get_packed_size
                     (const FRRequest   *message);
size_t fr__request__pack
                     (const FRRequest   *message,
                      uint8_t             *out);
size_t fr__request__pack_to_buffer
                     (const FRRequest   *message,
                      ProtobufCBuffer     *buffer);
FRRequest *
       fr__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fr__request__free_unpacked
                     (FRRequest *message,
                      ProtobufCAllocator *allocator);
/* ModState methods */
void   mod__state__init
                     (ModState         *message);
size_t mod__state__get_packed_size
                     (const ModState   *message);
size_t mod__state__pack
                     (const ModState   *message,
                      uint8_t             *out);
size_t mod__state__pack_to_buffer
                     (const ModState   *message,
                      ProtobufCBuffer     *buffer);
ModState *
       mod__state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mod__state__free_unpacked
                     (ModState *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*FRAVP_Closure)
                 (const FRAVP *message,
                  void *closure_data);
typedef void (*FRPacket_Closure)
                 (const FRPacket *message,
                  void *closure_data);
typedef void (*FRRequest_Closure)
                 (const FRRequest *message,
                  void *closure_data);
typedef void (*ModState_Closure)
                 (const ModState *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    rlm__rcode__descriptor;
extern const ProtobufCEnumDescriptor    rlm__component__descriptor;
extern const ProtobufCMessageDescriptor fr__avp__descriptor;
extern const ProtobufCMessageDescriptor fr__packet__descriptor;
extern const ProtobufCMessageDescriptor fr__request__descriptor;
extern const ProtobufCMessageDescriptor mod__state__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_rlm_5fzmq_2eproto__INCLUDED */
